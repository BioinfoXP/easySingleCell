cutoff <- surv_cutpoint(rt, time = "futime", event = "fustat", variables = genes)
summary(cutoff) # Output the summary of cutoff
# Categorize continuous variables based on the cutoff values
groups <- surv_categorize(cutoff)
str(groups)
head(groups)
# Loop through each gene in the genes vector
for (gene in genes) {
message("Processing gene: ", gene)
# Assign gene to a global variable
gene <<- gene # It is necessary, or the as.formula can not recongonize!!
# Construct the survival analysis formula and fit the model
fit <- survfit(as.formula(paste0('Surv(futime, fustat) ~ ', gene)), data = groups)
# Plot the survival curve using ggsurvplot
p <- ggsurvplot(fit,
data = groups,                   # Use the categorized data
pval = TRUE, # Show p-value
xlab='Time(Month)',
ylab='OS(Overcall Survival)',
ggtheme =  ggpubr::theme_pubr(base_size = 16),
pval.method = TRUE,              # Show p-value method
palette = palette,             # Use the specified palette
risk.table = TRUE,               # Show risk table
conf.int = FALSE)              # Show confidence interval (CI)
# Save the plot to a PDF file
ggsave(filename = paste0(output_dir, 'Surv_', gene, '.pdf'),
plot = p$plot,                           # Use the plot object returned by ggsurvplot
width = width,
height = height)
# Remove the global gene variable
gene <<- NULL
}
}
TCGASurvivalPlot(rt = rt,genes = genes)
TCGASurvivalPlot <- function(rt, genes, palette = c("#F1788D", "#54990F"),
output_dir = "./output_figure/", width = 4, height = 3) {
# Ensure necessary libraries are loaded
library(survminer)
library(survival)
# Create output directory if it doesn't exist
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE)
}
# Determine the best cutoff values for gene expression
cutoff <- surv_cutpoint(rt, time = "futime", event = "fustat", variables = genes)
summary(cutoff) # Output the summary of cutoff
# Categorize continuous variables based on the cutoff values
groups <- surv_categorize(cutoff)
str(groups)
head(groups)
# Loop through each gene in the genes vector
for (gene in genes) {
message("Processing gene: ", gene)
# Assign gene to a global variable
gene <<- gene # It is necessary, or the as.formula can not recongonize!!
# Construct the survival analysis formula and fit the model
fit <- survfit(as.formula(paste0('Surv(futime, fustat) ~ ', gene)), data = groups)
# Plot the survival curve using ggsurvplot
p <- ggsurvplot(fit,
data = groups,                   # Use the categorized data
pval = TRUE, # Show p-value
legend='right',
xlab='Time(Months)',
ylab='OS(Overall Survival)',
ggtheme =  ggpubr::theme_pubr(base_size = 16),
pval.method = TRUE,              # Show p-value method
palette = palette,             # Use the specified palette
risk.table = TRUE,               # Show risk table
conf.int = FALSE)              # Show confidence interval (CI)
# Save the plot to a PDF file
ggsave(filename = paste0(output_dir, 'Surv_', gene, '.pdf'),
plot = p$plot,                           # Use the plot object returned by ggsurvplot
width = width,
height = height)
# Remove the global gene variable
gene <<- NULL
}
}
TCGASurvivalPlot(rt = rt,genes = genes)
TCGASurvivalPlot <- function(rt, genes, palette = c("#F1788D", "#54990F"),
output_dir = "./output_figure/", width = 4, height = 3) {
# Ensure necessary libraries are loaded
library(survminer)
library(survival)
# Create output directory if it doesn't exist
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE)
}
# Determine the best cutoff values for gene expression
cutoff <- surv_cutpoint(rt, time = "futime", event = "fustat", variables = genes)
summary(cutoff) # Output the summary of cutoff
# Categorize continuous variables based on the cutoff values
groups <- surv_categorize(cutoff)
str(groups)
head(groups)
# Loop through each gene in the genes vector
for (gene in genes) {
message("Processing gene: ", gene)
# Assign gene to a global variable
gene <<- gene # It is necessary, or the as.formula can not recongonize!!
# Construct the survival analysis formula and fit the model
fit <- survfit(as.formula(paste0('Surv(futime, fustat) ~ ', gene)), data = groups)
# Plot the survival curve using ggsurvplot
p <- ggsurvplot(fit,
data = groups,                   # Use the categorized data
pval = TRUE, # Show p-value
legend='top',
xlab='Time(Months)',
ylab='OS(Overall Survival)',
ggtheme =  ggpubr::theme_pubr(base_size = 16),
pval.method = TRUE,              # Show p-value method
palette = palette,             # Use the specified palette
risk.table = TRUE,               # Show risk table
conf.int = FALSE)              # Show confidence interval (CI)
# Save the plot to a PDF file
ggsave(filename = paste0(output_dir, 'Surv_', gene, '.pdf'),
plot = p$plot,                           # Use the plot object returned by ggsurvplot
width = width,
height = height)
# Remove the global gene variable
gene <<- NULL
}
}
TCGASurvivalPlot(rt = rt,genes = genes)
TCGASurvivalPlot <- function(rt, genes, palette = c("#F1788D", "#54990F"),
output_dir = "./output_figure/", width = 5, height = 4) {
# Ensure necessary libraries are loaded
library(survminer)
library(survival)
# Create output directory if it doesn't exist
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE)
}
# Determine the best cutoff values for gene expression
cutoff <- surv_cutpoint(rt, time = "futime", event = "fustat", variables = genes)
summary(cutoff) # Output the summary of cutoff
# Categorize continuous variables based on the cutoff values
groups <- surv_categorize(cutoff)
str(groups)
head(groups)
# Loop through each gene in the genes vector
for (gene in genes) {
message("Processing gene: ", gene)
# Assign gene to a global variable
gene <<- gene # It is necessary, or the as.formula can not recongonize!!
# Construct the survival analysis formula and fit the model
fit <- survfit(as.formula(paste0('Surv(futime, fustat) ~ ', gene)), data = groups)
# Plot the survival curve using ggsurvplot
p <- ggsurvplot(fit,
data = groups,                   # Use the categorized data
pval = TRUE, # Show p-value
legend='top',
xlab='Time(Months)',
ylab='OS(Overall Survival)',
ggtheme =  ggpubr::theme_pubr(base_size = 16),
pval.method = TRUE,              # Show p-value method
palette = palette,             # Use the specified palette
risk.table = TRUE,               # Show risk table
conf.int = FALSE)              # Show confidence interval (CI)
# Save the plot to a PDF file
ggsave(filename = paste0(output_dir, 'Surv_', gene, '.pdf'),
plot = p$plot,                           # Use the plot object returned by ggsurvplot
width = width,
height = height)
# Remove the global gene variable
gene <<- NULL
}
}
TCGASurvivalPlot(rt = rt,genes = genes)
TCGASurvivalPlot <- function(rt, genes, palette = c("#F1788D", "#54990F"),
output_dir = "./output_figure/", width = 5, height = 4) {
# Ensure necessary libraries are loaded
library(survminer)
library(survival)
# Create output directory if it doesn't exist
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE)
}
# Determine the best cutoff values for gene expression
cutoff <- surv_cutpoint(rt, time = "futime", event = "fustat", variables = genes)
summary(cutoff) # Output the summary of cutoff
# Categorize continuous variables based on the cutoff values
groups <- surv_categorize(cutoff)
str(groups)
head(groups)
# Loop through each gene in the genes vector
for (gene in genes) {
message("Processing gene: ", gene)
# Assign gene to a global variable
gene <<- gene # It is necessary, or the as.formula can not recongonize!!
# Construct the survival analysis formula and fit the model
fit <- survfit(as.formula(paste0('Surv(futime, fustat) ~ ', gene)), data = groups)
# Plot the survival curve using ggsurvplot
p <- ggsurvplot(fit,
data = groups,                   # Use the categorized data
pval = TRUE, # Show p-value
legend = c(0.2, 0.2),
xlab='Time(Months)',
ylab='OS(Overall Survival)',
ggtheme =  ggpubr::theme_pubr(base_size = 16),
pval.method = TRUE,              # Show p-value method
palette = palette,             # Use the specified palette
risk.table = TRUE,               # Show risk table
conf.int = FALSE)              # Show confidence interval (CI)
# Save the plot to a PDF file
ggsave(filename = paste0(output_dir, 'Surv_', gene, '.pdf'),
plot = p$plot,                           # Use the plot object returned by ggsurvplot
width = width,
height = height)
# Remove the global gene variable
gene <<- NULL
}
}
TCGASurvivalPlot(rt = rt,genes = genes)
TCGASurvivalPlot <- function(rt, genes, palette = c("#F1788D", "#54990F"),
output_dir = "./output_figure/", width = 5, height = 4) {
# Ensure necessary libraries are loaded
library(survminer)
library(survival)
# Create output directory if it doesn't exist
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE)
}
# Determine the best cutoff values for gene expression
cutoff <- surv_cutpoint(rt, time = "futime", event = "fustat", variables = genes)
summary(cutoff) # Output the summary of cutoff
# Categorize continuous variables based on the cutoff values
groups <- surv_categorize(cutoff)
str(groups)
head(groups)
# Loop through each gene in the genes vector
for (gene in genes) {
message("Processing gene: ", gene)
# Assign gene to a global variable
gene <<- gene # It is necessary, or the as.formula can not recongonize!!
# Construct the survival analysis formula and fit the model
fit <- survfit(as.formula(paste0('Surv(futime, fustat) ~ ', gene)), data = groups)
# Plot the survival curve using ggsurvplot
p <- ggsurvplot(fit,
data = groups,                   # Use the categorized data
pval = TRUE, # Show p-value
legend = c(0.5, 0.5),
xlab='Time(Months)',
ylab='OS(Overall Survival)',
ggtheme =  ggpubr::theme_pubr(base_size = 16),
pval.method = TRUE,              # Show p-value method
palette = palette,             # Use the specified palette
risk.table = TRUE,               # Show risk table
conf.int = FALSE)              # Show confidence interval (CI)
# Save the plot to a PDF file
ggsave(filename = paste0(output_dir, 'Surv_', gene, '.pdf'),
plot = p$plot,                           # Use the plot object returned by ggsurvplot
width = width,
height = height)
# Remove the global gene variable
gene <<- NULL
}
}
TCGASurvivalPlot(rt = rt,genes = genes)
TCGASurvivalPlot <- function(rt, genes, palette = c("#F1788D", "#54990F"),
output_dir = "./output_figure/", width = 5, height = 4) {
# Ensure necessary libraries are loaded
library(survminer)
library(survival)
# Create output directory if it doesn't exist
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE)
}
# Determine the best cutoff values for gene expression
cutoff <- surv_cutpoint(rt, time = "futime", event = "fustat", variables = genes)
summary(cutoff) # Output the summary of cutoff
# Categorize continuous variables based on the cutoff values
groups <- surv_categorize(cutoff)
str(groups)
head(groups)
# Loop through each gene in the genes vector
for (gene in genes) {
message("Processing gene: ", gene)
# Assign gene to a global variable
gene <<- gene # It is necessary, or the as.formula can not recongonize!!
# Construct the survival analysis formula and fit the model
fit <- survfit(as.formula(paste0('Surv(futime, fustat) ~ ', gene)), data = groups)
# Plot the survival curve using ggsurvplot
p <- ggsurvplot(fit,
data = groups,                   # Use the categorized data
pval = TRUE, # Show p-value
legend = c(0.8, 0.8),
xlab='Time(Months)',
ylab='OS(Overall Survival)',
ggtheme =  ggpubr::theme_pubr(base_size = 16),
pval.method = TRUE,              # Show p-value method
palette = palette,             # Use the specified palette
risk.table = TRUE,               # Show risk table
conf.int = FALSE)              # Show confidence interval (CI)
# Save the plot to a PDF file
ggsave(filename = paste0(output_dir, 'Surv_', gene, '.pdf'),
plot = p$plot,                           # Use the plot object returned by ggsurvplot
width = width,
height = height)
# Remove the global gene variable
gene <<- NULL
}
}
TCGASurvivalPlot(rt = rt,genes = genes)
TCGASurvivalPlot <- function(rt, genes, palette = c("#F1788D", "#54990F"),
output_dir = "./output_figure/", width = 6, height = 4) {
# Ensure necessary libraries are loaded
library(survminer)
library(survival)
# Create output directory if it doesn't exist
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE)
}
# Determine the best cutoff values for gene expression
cutoff <- surv_cutpoint(rt, time = "futime", event = "fustat", variables = genes)
summary(cutoff) # Output the summary of cutoff
# Categorize continuous variables based on the cutoff values
groups <- surv_categorize(cutoff)
str(groups)
head(groups)
# Loop through each gene in the genes vector
for (gene in genes) {
message("Processing gene: ", gene)
# Assign gene to a global variable
gene <<- gene # It is necessary, or the as.formula can not recongonize!!
# Construct the survival analysis formula and fit the model
fit <- survfit(as.formula(paste0('Surv(futime, fustat) ~ ', gene)), data = groups)
# Plot the survival curve using ggsurvplot
p <- ggsurvplot(fit,
data = groups,                   # Use the categorized data
pval = TRUE, # Show p-value
legend = c(0.8, 0.8),
xlab='Time(Months)',
ylab='OS(Overall Survival)',
ggtheme =  ggpubr::theme_pubr(base_size = 16),
pval.method = TRUE,              # Show p-value method
palette = palette,             # Use the specified palette
risk.table = TRUE,               # Show risk table
conf.int = FALSE)              # Show confidence interval (CI)
# Save the plot to a PDF file
ggsave(filename = paste0(output_dir, 'Surv_', gene, '.pdf'),
plot = p$plot,                           # Use the plot object returned by ggsurvplot
width = width,
height = height)
# Remove the global gene variable
gene <<- NULL
}
}
TCGASurvivalPlot(rt = rt,genes = genes)
TCGASurvivalPlot <- function(rt, genes, palette = c("#F1788D", "#54990F"),
output_dir = "./output_figure/", width = 5.5, height = 4) {
# Ensure necessary libraries are loaded
library(survminer)
library(survival)
# Create output directory if it doesn't exist
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE)
}
# Determine the best cutoff values for gene expression
cutoff <- surv_cutpoint(rt, time = "futime", event = "fustat", variables = genes)
summary(cutoff) # Output the summary of cutoff
# Categorize continuous variables based on the cutoff values
groups <- surv_categorize(cutoff)
str(groups)
head(groups)
# Loop through each gene in the genes vector
for (gene in genes) {
message("Processing gene: ", gene)
# Assign gene to a global variable
gene <<- gene # It is necessary, or the as.formula can not recongonize!!
# Construct the survival analysis formula and fit the model
fit <- survfit(as.formula(paste0('Surv(futime, fustat) ~ ', gene)), data = groups)
# Plot the survival curve using ggsurvplot
p <- ggsurvplot(fit,
data = groups,                   # Use the categorized data
pval = TRUE, # Show p-value
legend = c(0.75, 0.75),
xlab='Time(Months)',
ylab='OS(Overall Survival)',
ggtheme =  ggpubr::theme_pubr(base_size = 16),
pval.method = TRUE,              # Show p-value method
palette = palette,             # Use the specified palette
risk.table = TRUE,               # Show risk table
conf.int = FALSE)              # Show confidence interval (CI)
# Save the plot to a PDF file
ggsave(filename = paste0(output_dir, 'Surv_', gene, '.pdf'),
plot = p$plot,                           # Use the plot object returned by ggsurvplot
width = width,
height = height)
# Remove the global gene variable
gene <<- NULL
}
}
TCGASurvivalPlot(rt = rt,genes = genes)
TCGASurvivalPlot <- function(rt, genes, palette = c("#F1788D", "#54990F"),
output_dir = "./output_figure/", width = 5.5, height = 3.5) {
# Ensure necessary libraries are loaded
library(survminer)
library(survival)
# Create output directory if it doesn't exist
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE)
}
# Determine the best cutoff values for gene expression
cutoff <- surv_cutpoint(rt, time = "futime", event = "fustat", variables = genes)
summary(cutoff) # Output the summary of cutoff
# Categorize continuous variables based on the cutoff values
groups <- surv_categorize(cutoff)
str(groups)
head(groups)
# Loop through each gene in the genes vector
for (gene in genes) {
message("Processing gene: ", gene)
# Assign gene to a global variable
gene <<- gene # It is necessary, or the as.formula can not recongonize!!
# Construct the survival analysis formula and fit the model
fit <- survfit(as.formula(paste0('Surv(futime, fustat) ~ ', gene)), data = groups)
# Plot the survival curve using ggsurvplot
p <- ggsurvplot(fit,
data = groups,                   # Use the categorized data
pval = TRUE, # Show p-value
legend = c(0.75, 0.75),
xlab='Time(Months)',
ylab='OS(Overall Survival)',
ggtheme =  ggpubr::theme_pubr(base_size = 16),
pval.method = TRUE,              # Show p-value method
palette = palette,             # Use the specified palette
risk.table = TRUE,               # Show risk table
conf.int = FALSE)              # Show confidence interval (CI)
# Save the plot to a PDF file
ggsave(filename = paste0(output_dir, 'Surv_', gene, '.pdf'),
plot = p$plot,                           # Use the plot object returned by ggsurvplot
width = width,
height = height)
# Remove the global gene variable
gene <<- NULL
}
}
TCGASurvivalPlot(rt = rt,genes = genes)
TCGASurvivalPlot <- function(rt, genes, palette = c("#F1788D", "#54990F"),
output_dir = "./output_figure/", width = 5.5, height = 4) {
# Ensure necessary libraries are loaded
library(survminer)
library(survival)
# Create output directory if it doesn't exist
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE)
}
# Determine the best cutoff values for gene expression
cutoff <- surv_cutpoint(rt, time = "futime", event = "fustat", variables = genes)
summary(cutoff) # Output the summary of cutoff
# Categorize continuous variables based on the cutoff values
groups <- surv_categorize(cutoff)
str(groups)
head(groups)
# Loop through each gene in the genes vector
for (gene in genes) {
message("Processing gene: ", gene)
# Assign gene to a global variable
gene <<- gene # It is necessary, or the as.formula can not recongonize!!
# Construct the survival analysis formula and fit the model
fit <- survfit(as.formula(paste0('Surv(futime, fustat) ~ ', gene)), data = groups)
# Plot the survival curve using ggsurvplot
p <- ggsurvplot(fit,
data = groups,                   # Use the categorized data
pval = TRUE, # Show p-value
legend = c(0.75, 0.75),
xlab='Time(Months)',
ylab='OS(Overall Survival)',
ggtheme =  ggpubr::theme_pubr(base_size = 16),
pval.method = TRUE,              # Show p-value method
palette = palette,             # Use the specified palette
risk.table = TRUE,               # Show risk table
conf.int = FALSE)              # Show confidence interval (CI)
# Save the plot to a PDF file
ggsave(filename = paste0(output_dir, 'Surv_', gene, '.pdf'),
plot = p$plot,                           # Use the plot object returned by ggsurvplot
width = width,
height = height)
# Remove the global gene variable
gene <<- NULL
}
}
TCGASurvivalPlot(rt = rt,genes = genes)
library(easySingleCell)
library(easySingleCell)
get_TCGA(cancer_type = 'STAD')
load('./output_xena/counts_xena_clean_STAD.Rdata')
res <- TCGADegLimma(expr.tpm = tpm_data)
TCGAExtractTumor(expr = tpm_data,surv = surv,cli = cli,
output_file = "./output_data/preprocessed_data.RData")
load("./output_data/preprocessed_data.RData")
TCGAStagePlot(genes = c('LAG3'),exp = exp,cli = cli)
TCGAUniCox(genes = sample(row.names(exp),30),expr.tpm = exp,surv = surv,cli = cli)
rt <- read.table('./output_data/rt.txt', header=T, sep="\t", check.names=F)
genes <- colnames(rt)[3:10]
TCGASurvivalPlot(rt = rt,genes = genes)
remove.packages("Matrix", lib="/usr/local/lib/R/library")
remove.packages("Matrix")
remove.packages("Matrix", lib="/usr/local/lib/R/library")
library(Matrix, lib.loc = "/usr/local/lib/R/library")
install.packages('Seurat', repos = c('https://satijalab.r-universe.dev'))
install.packages("~/R_wls2/OneGene-main/Matrix_1.6-1.tar.gz", repos = NULL, type = "source")
install.packages('Seurat', repos = c('https://satijalab.r-universe.dev'))
library(easySingleCell)
remove.packages("Matrix", lib="/usr/local/lib/R/library")
library(easySingleCell)
detach("package:Matrix", unload = TRUE)
library(easySingleCell)
library(Matrix)
remove.packages("Matrix", lib="/usr/local/lib/R/library")
library(Matrix)
