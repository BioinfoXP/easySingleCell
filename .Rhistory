geom_boxplot(alpha = 1, outlier.size = 0, size = 0.3, width = 0.2, fill = "white") +
stat_summary(fun = "mean", geom = "point", shape = 21, size = 2, fill = "blue") +
labs(x = xlab, y = ylab, title = title) +
theme_prism() +
theme(panel.grid = element_blank(),
axis.line = element_line(),
legend.position = legend_position,
axis.text = element_text(color = 'black', size = 12),
legend.text = element_text(color = 'black', size = 12),
axis.title = element_text(size = 12),
axis.text.x = element_text(angle = angle_x_text, vjust = 1, hjust = 1)) +
scale_fill_manual(values = fill.col)
# Set x and y axis limits if provided
if (!is.null(x_limits)) {
p <- p + scale_x_continuous(limits = x_limits, breaks = seq(x_limits[1],x_limits[2],x_breaks))
}
if (!is.null(y_limits)) {
p <- p + scale_y_continuous(limits = y_limits, breaks = seq(y_limits[1],y_limits[2],y_breaks) )
}
# Add significance layer if comparisons are provided
if (!is.null(comparisons)) {
p <- p + geom_signif(comparisons = comparisons,
map_signif_level = signif_map,
test = signif_test,
tip_length = signif_tip_length,
size = 0.8, color = "black")
}
return(p)
}
comparisons <- list(c("A_1", "A_2"), c("B_1", "B_2"), c("C_1", "C_2"))
# 使用函数
PlotViolin(df, x = "samples", y = "values",y_limits = c(0,20),
comparisons = comparisons,signif_tip_length = 0.01)
# 使用函数
PlotViolin(df, x = "samples", y = "values",y_limits = c(0,20),y_breaks = 5,
comparisons = comparisons,signif_tip_length = 0.01)
# 使用函数
PlotViolin(df, x = "samples", y = "values",y_limits = c(0,23),y_breaks = 5,
comparisons = comparisons,signif_tip_length = 0.01)
# 使用函数
PlotViolin(df, x = "samples", y = "values",y_limits = c(0,25),y_breaks = 5,
comparisons = comparisons,signif_tip_length = 0.01)
# 使用函数
PlotViolin(df, x = "samples", y = "values",
comparisons = comparisons,signif_tip_length = 0.01)
# 使用函数
PlotViolin(df, x = "samples", y = "values",y_limits = c(0,30),y_breaks = 5,
comparisons = comparisons,signif_tip_length = 0.01)
#' @export
#' @import ggplot2
#' @import ggpubr
#' @import ggsignif
#' @import tidyverse
#' @import ggprism
#' @import vioplot
#' @import RColorBrewer
#' @import grid
#' @import scales
PlotViolin <- function(df, x, y, comparisons = NULL,
fill.col = colorRampPalette(brewer.pal(9, "Set1"))(6),
color = colorRampPalette(brewer.pal(11, "BrBG"))(30),
title = NULL, xlab = NULL, ylab = NULL,
angle_x_text = 45, legend_position = "none",
signif_test = "t.test", signif_map = TRUE,
signif_tip_length = c(0.01),
x_limits = NULL, y_limits = NULL,
x_breaks = 1, y_breaks = 1) {
# Create the plot
p <- ggplot(df, aes_string(x = x, y = y, fill = x)) +
geom_violin(trim = TRUE, position = position_dodge(width = 0.1), scale = 'width') +
geom_boxplot(alpha = 1, outlier.size = 0, size = 0.3, width = 0.2, fill = "white") +
stat_summary(fun = "mean", geom = "point", shape = 21, size = 2, fill = "blue") +
labs(x = xlab, y = ylab, title = title) +
theme_prism() +
theme(panel.grid = element_blank(),
axis.line = element_line(),
legend.position = legend_position,
axis.text = element_text(color = 'black', size = 12),
legend.text = element_text(color = 'black', size = 12),
axis.title = element_text(size = 12),
axis.text.x = element_text(angle = angle_x_text, vjust = 1, hjust = 1)) +
scale_fill_manual(values = fill.col)
# Set x and y axis limits if provided
if (!is.null(x_limits)) {
p <- p + scale_x_continuous(limits = x_limits, breaks = seq(x_limits[1], x_limits[2], x_breaks))
}
if (!is.null(y_limits)) {
p <- p + scale_y_continuous(limits = y_limits, breaks = seq(y_limits[1], y_limits[2], y_breaks))
}
# Add significance layer if comparisons are provided
if (!is.null(comparisons)) {
p <- p + geom_signif(comparisons = comparisons,
map_signif_level = signif_map,
test = signif_test,
tip_length = signif_tip_length,
size = 0.8, color = "black")
}
return(p)
}
comparisons <- list(c("A_1", "A_2"), c("B_1", "B_2"), c("C_1", "C_2"))
# 使用函数
PlotViolin(df, x = "samples", y = "values",y_limits = c(0,30),y_breaks = 5,
comparisons = comparisons,signif_tip_length = 0.01)
library(easySingleCell)
data("iris")
iris
View(iris)
detach("package:easySingleCell", unload = TRUE)
library(easySingleCell)
rm(PlotViolin())
rm(PlotViolin
rm(PlotViolin)
?PlotViolin()
PlotViolin(iris,x = 'Species','Sepal.Length')
PlotViolin(iris,x = 'Species','Sepal.Length',y_limits = c(0,10))
PlotViolin(iris,x = 'Species','Sepal.Length',y_limits = c(0,10),y_breaks = 2)
PlotViolin(iris,x = 'Species','Sepal.Length',y_limits = c(2,10),y_breaks = 2)
PlotViolin(iris,x = 'Species','Sepal.Length',y_limits = c(2,8),y_breaks = 2)
PlotViolin(iris,x = 'Species','Sepal.Length',y_limits = c(2,8),y_breaks = 2,comparisons = list(c('setosa','versicolor')))
PlotViolin(iris,x = 'Species','Sepal.Length',y_limits = c(2,12),y_breaks = 2,comparisons = list(c('setosa','versicolor')))
PlotViolin(iris,x = 'Species','Sepal.Length',y_limits = c(2,10),y_breaks = 2,comparisons = list(c('setosa','versicolor')))
PlotViolin(iris,x = 'Species','Sepal.Length',comparisons = list(c('setosa','versicolor')))
PlotViolin(iris,x = 'Species','Sepal.Length',y_limits = c(5,10),y_breaks = 2,comparisons = list(c('setosa','versicolor')))
PlotViolin(iris,x = 'Species','Sepal.Length',y_limits = c(5,8),y_breaks = 0.5,comparisons = list(c('setosa','versicolor')))
PlotViolin(iris,x = 'Species','Sepal.Length',y_limits = c(5,10),y_breaks = 0.5,comparisons = list(c('setosa','versicolor')))
PlotViolin(iris,x = 'Species','Sepal.Length',y_limits = c(5,9),y_breaks = 0.5,comparisons = list(c('setosa','versicolor')))
PlotViolin(iris,x = 'Species','Sepal.Length',y_limits = c(5,8.5),y_breaks = 0.5,comparisons = list(c('setosa','versicolor')))
PlotViolin(iris,x = 'Species','Sepal.Length',y_limits = c(5,8.5),y_breaks = 0.5,comparisons = list(c('setosa','versicolor','setosa','verginica')))
PlotViolin(iris,x = 'Species','Sepal.Length',y_limits = c(5,8.5),y_breaks = 0.5,comparisons = list(c('setosa','versicolor','setosa','virginica')))
PlotViolin(iris,x = 'Species','Sepal.Length',y_limits = c(5,10),y_breaks = 0.5,comparisons = list(c('setosa','versicolor','setosa','virginica')))
PlotViolin(iris,x = 'Species','Sepal.Length',y_limits = c(5,10),y_breaks = 0.5,comparisons = list(c('setosa','versicolor'),c('setosa','virginica')))
PlotViolin(iris,x = 'Species','Sepal.Length',y_limits = c(5,10),y_breaks = 0.5,comparisons = list(c('setosa','versicolor'),c('versicolor','virginica')))
PlotViolin(iris,x = 'Species','Sepal.Length',y_limits = c(5,10),y_breaks = 0.5,comparisons = list(c('setosa','versicolor'),c('versicolor','virginica')),signif_tip_length = 0.1)
PlotViolin(iris,x = 'Species','Sepal.Length',y_limits = c(5,10),y_breaks = 0.5,comparisons = list(c('setosa','versicolor'),c('versicolor','virginica')),signif_tip_length = 0.0)
?geom_signif
#' @export
#' @import ggplot2
#' @import ggpubr
#' @import ggsignif
#' @import tidyverse
#' @import ggprism
#' @import vioplot
#' @import RColorBrewer
#' @import grid
#' @import scales
PlotViolin <- function(df, x, y, comparisons = NULL,
fill.col = colorRampPalette(brewer.pal(9, "Set1"))(6),
color = colorRampPalette(brewer.pal(11, "BrBG"))(30),
title = NULL, xlab = NULL, ylab = NULL,
angle_x_text = 45, legend_position = "none",
signif_test = "t.test", signif_map = TRUE,
signif_tip_length = c(0.01),
x_limits = NULL, y_limits = NULL,
x_breaks = 1, y_breaks = 1) {
# Create the plot
p <- ggplot(df, aes_string(x = x, y = y, fill = x)) +
geom_violin(trim = TRUE, position = position_dodge(width = 0.1), scale = 'width') +
geom_boxplot(alpha = 1, outlier.size = 0, size = 0.3, width = 0.2, fill = "white") +
stat_summary(fun = "mean", geom = "point", shape = 21, size = 2, fill = "blue") +
labs(x = xlab, y = ylab, title = title) +
theme_prism() +
theme(panel.grid = element_blank(),
axis.line = element_line(),
legend.position = legend_position,
axis.text = element_text(color = 'black', size = 12),
legend.text = element_text(color = 'black', size = 12),
axis.title = element_text(size = 12),
axis.text.x = element_text(angle = angle_x_text, vjust = 1, hjust = 1)) +
scale_fill_manual(values = fill.col)
# Set x and y axis limits if provided
if (!is.null(x_limits)) {
p <- p + scale_x_continuous(limits = x_limits, breaks = seq(x_limits[1], x_limits[2], x_breaks))
}
if (!is.null(y_limits)) {
p <- p + scale_y_continuous(limits = y_limits, breaks = seq(y_limits[1], y_limits[2], y_breaks))
}
# Add significance layer if comparisons are provided
if (!is.null(comparisons)) {
p <- p + geom_signif(comparisons = comparisons,
map_signif_level = signif_map,
test = signif_test,
step_increase = 0.1,
tip_length = signif_tip_length,
size = 0.8, color = "black")
}
return(p)
}
detach("package:easySingleCell", unload = TRUE)
library(easySingleCell)
library(easySingleCell)
detach("package:easySingleCell", unload = TRUE)
rm(PlotViolin())
rm(PlotViolin
rm(PlotViolin)
library(easySingleCell)
PlotViolin(iris,x = 'Species','Sepal.Length',y_limits = c(5,10),y_breaks = 0.5,comparisons = list(c('setosa','versicolor'),c('versicolor','virginica')),signif_tip_length = 0.0)
system.file("data", "hg38_genecode_v27.txt", package = "easySingleCell")
library(easySingleCell)
system.file("extdata", "hg38_gencode_v27.txt", package = "easySingleCell")
library(easySingleCell)
?RunInferCNVPipeline()
paste0("c(", ref_group, "='#00A0877F',", obs_group, "='#E64B357F')")
length(cluster_colors)
cluster_colors =c("#E69F00","#56B4E9","#009E73","#F0E442","#0072B2","#843C39")
length(cluster_colors)
!k_clusters==length(cluster_colors
k_clusters = 6
k_clusters==length(cluster_colors)
library(easySingleCell)
library(easySingleCell)
dim(sce)
library(easySingleCell)
dir.create('vignettes')
library(easySingleCell)
#############################################################################
#                                在R中可视化
#############################################################################
setwd("/home/shpc_100828/Pyscenic/")
#############################################################################
#                                在R中可视化
#############################################################################
#加载分析包
library(SCopeLoomR)
library(AUCell)
library(SCENIC)
installed.packages('SCENIC')
devtools::install_github('aertslab/SCENIC')
#############################################################################
#                                在R中可视化
#############################################################################
#加载分析包
library(SCopeLoomR)
library(AUCell)
library(SCENIC)
#可视化相关包，多加载点没毛病
library(dplyr)
library(KernSmooth)
library(RColorBrewer)
library(plotly)
library(BiocParallel)
library(grid)
library(ComplexHeatmap)
library(data.table)
library(ggplot2)
library(pheatmap)
##读取pyscenic第三步分析的文件sce_SCENIC.sce_SCENIC
sce_SCENIC <- open_loom("../singularity/pyscenic/pyscenic/output/03-pyscenic_output.loom")
regulons_incidMat <- get_regulons(sce_SCENIC, column.attr.name="Regulons")
#提取第二步分析的regulons,column.attr.name填Regulons，具体按照实际情况提示选择
#也就是我们所输入的基因和找到的转录因子组成的表达文件
regulons <- regulonsToGeneLists(regulons_incidMat)#将上一步矩阵文件转化为list
class(regulons)
#提取pyscenic第三步分析中AUC结果
regulonAUC <- get_regulons_AUC(sce_SCENIC, column.attr.name='RegulonsAUC')
regulonAucThresholds <- get_regulon_thresholds(sce_SCENIC)
#以上就是一些主要文件了、够后续分析和可视化
#####################################################################################
##==============================加载seurat对象、RSS分析=======================================
#在可视化之前，我们再做一个分析，计算RSS值，计算regulon特异性评分
human_data <- qread('../cervix_cancer/output_data/Figure5/sce.tumor.qs')
#以上就是一些主要文件了、够后续分析和可视化
#####################################################################################
##==============================加载seurat对象、RSS分析=======================================
#在可视化之前，我们再做一个分析，计算RSS值，计算regulon特异性评分
human_data <- qs::qread('../cervix_cancer/output_data/Figure5/sce.tumor.qs')
cellinfo <- human_data@meta.data[,c('celltype','group',"nFeature_RNA","nCount_RNA")]#细胞meta信息
cellinfo <- human_data@meta.data[,c('cell_type','group',"nFeature_RNA","nCount_RNA")]#细胞meta信息
######计算细胞特异性TF
#在实际数据分析应用中，我认为比较靠谱的应用在于，细胞分了亚群，例如macrophage，有不同的特征
#我们可以查看不同亚群特异性的TF，有助于了解亚群的功能！！！！
cellTypes <-  as.data.frame(subset(cellinfo,select = 'celltype'))
selectedResolution <- "celltype"
sub_regulonAUC <- regulonAUC
rss <- calcRSS(AUC=getAUC(sub_regulonAUC),#从aucellresults获取AUC矩阵
cellAnnotation=cellTypes[colnames(sub_regulonAUC),
selectedResolution])
######计算细胞特异性TF
#在实际数据分析应用中，我认为比较靠谱的应用在于，细胞分了亚群，例如macrophage，有不同的特征
#我们可以查看不同亚群特异性的TF，有助于了解亚群的功能！！！！
cellTypes <-  as.data.frame(subset(cellinfo,select = 'celltype'))
cellinfo
######计算细胞特异性TF
#在实际数据分析应用中，我认为比较靠谱的应用在于，细胞分了亚群，例如macrophage，有不同的特征
#我们可以查看不同亚群特异性的TF，有助于了解亚群的功能！！！！
cellTypes <-  as.data.frame(subset(cellinfo,select = 'cell_type'))
selectedResolution <- "cell_type"
sub_regulonAUC <- regulonAUC
rss <- calcRSS(AUC=getAUC(sub_regulonAUC),#从aucellresults获取AUC矩阵
cellAnnotation=cellTypes[colnames(sub_regulonAUC),
selectedResolution])
colnames(sub_regulonAUC)
getAUC(sub_regulonAUC)
selectedResolution
selectedResolution
rss <- calcRSS(AUC=getAUC(sub_regulonAUC),#从aucellresults获取AUC矩阵
cellAnnotation=cellTypes[colnames(sub_regulonAUC),
selectedResolution])
rss=na.omit(rss)#去除含有NA的行
rss <- calcRSS(AUC=getAUC(sub_regulonAUC),#从aucellresults获取AUC矩阵
cellAnnotation=cellTypes[colnames(sub_regulonAUC),
selectedResolution])
#############################################################################
#                                在R中可视化
#############################################################################
#加载分析包
library(SCopeLoomR)
library(AUCell)
library(SCENIC)
#可视化相关包，多加载点没毛病
library(dplyr)
library(KernSmooth)
library(RColorBrewer)
library(plotly)
library(BiocParallel)
library(grid)
library(ComplexHeatmap)
library(data.table)
library(ggplot2)
library(pheatmap)
##读取pyscenic第三步分析的文件sce_SCENIC.sce_SCENIC
sce_SCENIC <- open_loom("../singularity/pyscenic/pyscenic/output/03-pyscenic_output.loom")
# exprMat <- get_dgem(sce_SCENIC)#从sce_SCENIC文件提取表达矩阵
# exprMat_log <- log2(exprMat+1) # log处理
#这里的表达矩阵其实就是我们在pyscenic分析第一步的输入矩阵，可见这些文件都是在一起的
regulons_incidMat <- get_regulons(sce_SCENIC, column.attr.name="Regulons")
#提取第二步分析的regulons,column.attr.name填Regulons，具体按照实际情况提示选择
#也就是我们所输入的基因和找到的转录因子组成的表达文件
regulons <- regulonsToGeneLists(regulons_incidMat)#将上一步矩阵文件转化为list
class(regulons)
#提取pyscenic第三步分析中AUC结果
regulonAUC <- get_regulons_AUC(sce_SCENIC, column.attr.name='RegulonsAUC')
regulonAucThresholds <- get_regulon_thresholds(sce_SCENIC)
#以上就是一些主要文件了、够后续分析和可视化
#####################################################################################
##==============================加载seurat对象、RSS分析=======================================
#在可视化之前，我们再做一个分析，计算RSS值，计算regulon特异性评分
human_data <- qs::qread('../cervix_cancer/output_data/Figure5/sce.tumor.qs')
cellinfo <- human_data@meta.data[,c('cell_type','group',"nFeature_RNA","nCount_RNA")]#细胞meta信息
colnames(cellinfo)=c('celltype', 'group','nGene' ,'nUMI')
######计算细胞特异性TF
#在实际数据分析应用中，我认为比较靠谱的应用在于，细胞分了亚群，例如macrophage，有不同的特征
#我们可以查看不同亚群特异性的TF，有助于了解亚群的功能！！！！
cellTypes <-  as.data.frame(subset(cellinfo,select = 'cell_type'))
cellinfo
colnames(cellinfo)=c('celltype', 'group','nGene' ,'nUMI')
######计算细胞特异性TF
#在实际数据分析应用中，我认为比较靠谱的应用在于，细胞分了亚群，例如macrophage，有不同的特征
#我们可以查看不同亚群特异性的TF，有助于了解亚群的功能！！！！
cellTypes <-  as.data.frame(subset(cellinfo,select = 'celltype'))
selectedResolution <- "celltype"
sub_regulonAUC <- regulonAUC
rss <- calcRSS(AUC=getAUC(sub_regulonAUC),#从aucellresults获取AUC矩阵
cellAnnotation=cellTypes[colnames(sub_regulonAUC),
selectedResolution])
/calcRSS
?calcRSS
View(cellTypes)
selectedResolution
selectedResolution
cellTypes[colnames(sub_regulonAUC),
selectedResolution]
colnames(sub_regulonAUC)
rss <- calcRSS(AUC=getAUC(sub_regulonAUC),#从aucellresults获取AUC矩阵
cellAnnotation=cellTypes)
sub_regulonAUC <- regulonAUC
rss <- calcRSS(AUC=getAUC(sub_regulonAUC),#从aucellresults获取AUC矩阵
cellAnnotation=cellTypes[colnames(sub_regulonAUC),
selectedResolution])
regulonAUC
colnames(regulonAUC)
?easySingleCell::Seu2Loom
library(easySingleCell)
?Seu2Loom()
??Seu2Loom()
easySingleCell::Seu2Loom(seu = human_data,filename = './data/test')
easySingleCell::Seu2Loom(seu = human_data,filename = '../singularity/pyscenic/pyscenic/output/00-2.mc_mat_for_step1')
easySingleCell::Seu2Loom(seu = human_data,filename = '../singularity/pyscenic/pyscenic/output/00-2.mc_mat_for_step1',overwrite = T)
easySingleCell::ImportPyscenicLoom('../singularity/pyscenic/pyscenic/output/03-pyscenic_output.loom')
res <- easySingleCell::ImportPyscenicLoom('../singularity/pyscenic/pyscenic/output/03-pyscenic_output.loom')
View(res)
View(res[["RegulonsAUC"]])
res[["Regulons"]]
library(easySingleCell)
#############################################################################
#加载分析包
library(SCopeLoomR)
library(AUCell)
library(SCENIC)
#可视化相关包，多加载点没毛病
library(dplyr)
library(KernSmooth)
library(RColorBrewer)
library(plotly)
library(BiocParallel)
library(grid)
library(ComplexHeatmap)
library(data.table)
library(ggplot2)
library(pheatmap)
##读取pyscenic第三步分析的文件sce_SCENIC.sce_SCENIC
sce_SCENIC <- open_loom("../singularity/pyscenic/pyscenic/output/03-pyscenic_output.loom")
# exprMat <- get_dgem(sce_SCENIC)#从sce_SCENIC文件提取表达矩阵
# exprMat_log <- log2(exprMat+1) # log处理
#这里的表达矩阵其实就是我们在pyscenic分析第一步的输入矩阵，可见这些文件都是在一起的
regulons_incidMat <- get_regulons(sce_SCENIC, column.attr.name="Regulons")
##读取pyscenic第三步分析的文件sce_SCENIC.sce_SCENIC
sce_SCENIC <- open_loom("../singularity/pyscenic/pyscenic/output/03-pyscenic_output.loom")
# exprMat <- get_dgem(sce_SCENIC)#从sce_SCENIC文件提取表达矩阵
# exprMat_log <- log2(exprMat+1) # log处理
#这里的表达矩阵其实就是我们在pyscenic分析第一步的输入矩阵，可见这些文件都是在一起的
regulons_incidMat <- get_regulons(sce_SCENIC, column.attr.name="Regulons")
##读取pyscenic第三步分析的文件sce_SCENIC.sce_SCENIC
sce_SCENIC <- open_loom("../singularity/pyscenic/pyscenic/output/03-pyscenic_output.loom")
regulons_incidMat <- get_regulons(sce_SCENIC, column.attr.name="Regulons")
regulons_incidMat <- get_regulons(sce_SCENIC)
sce_SCENIC
##读取pyscenic第三步分析的文件sce_SCENIC.sce_SCENIC
sce_SCENIC <- open_loom("../singularity/pyscenic/pyscenic/output/03-pyscenic_output.loom")
regulons_incidMat <- get_regulons(sce_SCENIC, column.attr.name="Regulons")
regulons_incidMat <- get_regulons(sce_SCENIC, column.attr.name="Regulons")
sce_SCENIC
regulons_incidMat <- get_regulons(sce_SCENIC, column.attr.name="Regulons")
##读取pyscenic第三步分析的文件sce_SCENIC.sce_SCENIC
sce_SCENIC <- open_loom("../singularity/pyscenic/pyscenic/output/03-pyscenic_output.loom")
regulons_incidMat <- get_regulons(sce_SCENIC, column.attr.name="Regulons")
regulons_incidMat <- get_regulons(sce_SCENIC, column.attr.name="Regulons")
res <- easySingleCell::ImportPyscenicLoom('../singularity/pyscenic/pyscenic/output/03-pyscenic_output.loom')
#############################################################################
#                                在R中可视化
#############################################################################
#加载分析包
library(SCopeLoomR)
library(AUCell)
library(SCENIC)
#可视化相关包，多加载点没毛病
library(dplyr)
library(KernSmooth)
library(RColorBrewer)
library(plotly)
library(BiocParallel)
library(grid)
library(ComplexHeatmap)
library(data.table)
library(ggplot2)
library(pheatmap)
##读取pyscenic第三步分析的文件sce_SCENIC.sce_SCENIC
sce_SCENIC <- open_loom("../singularity/pyscenic/pyscenic/output/03-pyscenic_output.loom")
# exprMat <- get_dgem(sce_SCENIC)#从sce_SCENIC文件提取表达矩阵
# exprMat_log <- log2(exprMat+1) # log处理
regulons_incidMat <- get_regulons(sce_SCENIC, column.attr.name="Regulons")
res <- easySingleCell::ImportPyscenicLoom('../singularity/pyscenic/pyscenic/output/03-pyscenic_output.loom')
res <- easySingleCell::ImportPyscenicLoom('../singularity/pyscenic/pyscenic/output/03-pyscenic_output.loom')
res <- easySingleCell::ImportPyscenicLoom('../singularity/pyscenic/pyscenic/output/03-pyscenic_output.loom')
##读取pyscenic第三步分析的文件sce_SCENIC.sce_SCENIC
sce_SCENIC <- open_loom("../singularity/pyscenic/pyscenic/output/03-pyscenic_output.loom")
library(dplyr)
library(KernSmooth)
library(RColorBrewer)
library(plotly)
library(BiocParallel)
library(grid)
library(ComplexHeatmap)
library(data.table)
library(ggplot2)
library(pheatmap)
##读取pyscenic第三步分析的文件sce_SCENIC.sce_SCENIC
sce_SCENIC <- open_loom("../singularity/pyscenic/pyscenic/output/03-pyscenic_output.loom")
library(dplyr)
library(KernSmooth)
library(RColorBrewer)
library(plotly)
library(BiocParallel)
library(grid)
library(ComplexHeatmap)
library(data.table)
library(ggplot2)
library(pheatmap)
##读取pyscenic第三步分析的文件sce_SCENIC.sce_SCENIC
sce_SCENIC <- open_loom("../singularity/pyscenic/pyscenic/output/03-pyscenic_output.loom")
library(SCENIC)
##读取pyscenic第三步分析的文件sce_SCENIC.sce_SCENIC
sce_SCENIC <- open_loom("../singularity/pyscenic/pyscenic/output/03-pyscenic_output.loom")
library(RcisTarget)
##读取pyscenic第三步分析的文件sce_SCENIC.sce_SCENIC
sce_SCENIC <- open_loom("../singularity/pyscenic/pyscenic/output/03-pyscenic_output.loom")
res <- easySingleCell::ImportPyscenicLoom('../singularity/pyscenic/pyscenic/output/03-pyscenic_output.loom')
devtools::install_github("xmc811/Scillus", ref = "development")
library(Scillus)
#使用和umap一致的颜色
my36colors <-c('#E5D2DD', '#53A85F', '#F1BB72', '#F3B1A0', '#D6E7A3', '#57C3F3', '#476D87',
'#E95C59', '#E59CC4', '#AB3282', '#23452F', '#BD956A', '#8C549C', '#585658',
'#9FA3A8', '#E0D4CA', '#5F3D69', '#C5DEBA', '#58A4C3', '#E4C755', '#F7F398',
'#AA9A59', '#E63863', '#E39A35', '#C1E6F3', '#6778AE', '#91D0BE', '#B53E2B',
'#712820', '#DCC1DD', '#CCE0F5',  '#CCC9E6', '#625D9E', '#68A180', '#3A6963',
'#968175'
)
?plot_heatmap
library(easySingleCell)
devtools::install_github("xmc811/Scillus", ref = "development")
devtools::install_github("xmc811/Scillus", ref = "development",force = T)
VlnPlot(sce,'CD4')
VlnPlot(sce,features = 'CD4')
VlnPlot(sce,'FOXP3')
Best100(100)
install.packages("~/R_wls2/OneGene-main/inst/extdata/TheBestColors_0.1.0.tar.gz", repos = NULL, type = "source")
library(easySingleCell)
library(easySingleCell)
library(easySingleCell)
!FALSE
!FALSE
!FALSE
library(easySingleCell)
