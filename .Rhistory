#' @param df Data frame containing the data to be plotted.
#' @param x Variable name for grouping (column name).
#' @param y Numeric variable name (column name).
#' @param comparisons List of groups to compare. If not provided, no significance testing is performed.
#' @param fill.col Vector of colors for filling (default is colorRampPalette(brewer.pal(9, "Set1"))(6)).
#' @param color Vector of background colors (default is colorRampPalette(brewer.pal(11, "BrBG"))(30)).
#' @param title Title of the plot.
#' @param xlab X-axis label.
#' @param ylab Y-axis label.
#' @param angle_x_text Angle of the x-axis text (default is 45).
#' @param legend_position Position of the legend (default is "none").
#' @param signif_test Method for significance testing (default is "t.test").
#' @param signif_map Whether to use asterisks to show significance (default is TRUE).
#' @param signif_tip_length Length of the significance markers (default is c(0.01)).
#' @param x_limits Limits for the x-axis (default is NULL, which means ggplot2 will determine the limits).eg:c(0,20).
#' @param y_limits Limits for the y-axis (default is NULL, which means ggplot2 will determine the limits).
#' @param x_breaks Breaks for the x-axis (default is NULL, which means ggplot2 will determine the breaks).
#' @param y_breaks Breaks for the y-axis (default is NULL, which means ggplot2 will determine the breaks).
#' @return A ggplot object.
#' @examples
#' df <- data.frame(samples = rep(c("A_1", "A_2", "B_1", "B_2", "C_1", "C_2"), each = 10),
#'                  values = rnorm(60))
#' comparisons <- list(c("A_1", "A_2"), c("B_1", "B_2"), c("C_1", "C_2"))
#' PlotViolin(df, x = "samples", y = "values", comparisons = comparisons)
#' @export
#' @import ggplot2
#' @import ggpubr
#' @import ggsignif
#' @import tidyverse
#' @import ggprism
#' @import vioplot
#' @import RColorBrewer
#' @import grid
#' @import scales
PlotViolin <- function(df, x, y, comparisons = NULL,
fill.col = colorRampPalette(brewer.pal(9, "Set1"))(6),
color = colorRampPalette(brewer.pal(11, "BrBG"))(30),
title = NULL, xlab = NULL, ylab = NULL,
angle_x_text = 45, legend_position = "none",
signif_test = "t.test", signif_map = TRUE,
signif_tip_length = c(0.01),
x_limits = NULL, y_limits = NULL,
x_breaks = NULL, y_breaks = NULL) {
# Create the plot
p <- ggplot(df, aes_string(x = x, y = y, fill = x)) +
geom_violin(trim = TRUE, position = position_dodge(width = 0.1), scale = 'width') +
geom_boxplot(alpha = 1, outlier.size = 0, size = 0.3, width = 0.2, fill = "white") +
stat_summary(fun = "mean", geom = "point", shape = 21, size = 2, fill = "blue") +
labs(x = xlab, y = ylab, title = title) +
theme_prism() +
theme(panel.grid = element_blank(),
axis.line = element_line(),
legend.position = legend_position,
axis.text = element_text(color = 'black', size = 12),
legend.text = element_text(color = 'black', size = 12),
axis.title = element_text(size = 12),
axis.text.x = element_text(angle = angle_x_text, vjust = 1, hjust = 1)) +
scale_fill_manual(values = fill.col)
# Set x and y axis limits and breaks if provided
if (!is.null(x_limits)) {
p <- p + scale_x_continuous(limits = x_limits, breaks = x_breaks)
} else if (!is.null(x_breaks)) {
p <- p + scale_x_continuous(breaks = x_breaks)
}
if (!is.null(y_limits)) {
p <- p + scale_y_continuous(limits = y_limits, breaks = y_breaks)
} else if (!is.null(y_breaks)) {
p <- p + scale_y_continuous(breaks = y_breaks)
}
# Add significance layer if comparisons are provided
if (!is.null(comparisons)) {
p <- p + geom_signif(comparisons = comparisons,
map_signif_level = signif_map,
test = signif_test,
tip_length = signif_tip_length,
size = 0.8, color = "black")
}
return(p)
}
comparisons <- list(c("A_1", "A_2"), c("B_1", "B_2"), c("C_1", "C_2"))
# 使用函数
PlotViolin(df, x = "samples", y = "values",y_limits = seq(0,20),
comparisons = comparisons,signif_tip_length = 0.01)
# 使用函数
PlotViolin(df, x = "samples", y = "values",y_limits = c(0,20),
comparisons = comparisons,signif_tip_length = 0.01)
# 使用函数
PlotViolin(df, x = "samples", y = "values",y_limits = c(0,20),
comparisons = comparisons,signif_tip_length = 0.01)
# 使用函数
PlotViolin(df, x = "samples", y = "values",y_limits = c(0,20),y_breaks = 1,
comparisons = comparisons,signif_tip_length = 0.01)
# 使用函数
PlotViolin(df, x = "samples", y = "values",y_limits = c(1,20),y_breaks = 1,
comparisons = comparisons,signif_tip_length = 0.01)
#' @export
#' @import ggplot2
#' @import ggpubr
#' @import ggsignif
#' @import tidyverse
#' @import ggprism
#' @import vioplot
#' @import RColorBrewer
#' @import grid
#' @import scales
PlotViolin <- function(df, x, y, comparisons = NULL,
fill.col = colorRampPalette(brewer.pal(9, "Set1"))(6),
color = colorRampPalette(brewer.pal(11, "BrBG"))(30),
title = NULL, xlab = NULL, ylab = NULL,
angle_x_text = 45, legend_position = "none",
signif_test = "t.test", signif_map = TRUE,
signif_tip_length = c(0.01),
x_limits = NULL, y_limits = NULL,
x_breaks = NULL, y_breaks = NULL) {
# Create the plot
p <- ggplot(df, aes_string(x = x, y = y, fill = x)) +
geom_violin(trim = TRUE, position = position_dodge(width = 0.1), scale = 'width') +
geom_boxplot(alpha = 1, outlier.size = 0, size = 0.3, width = 0.2, fill = "white") +
stat_summary(fun = "mean", geom = "point", shape = 21, size = 2, fill = "blue") +
labs(x = xlab, y = ylab, title = title) +
theme_prism() +
theme(panel.grid = element_blank(),
axis.line = element_line(),
legend.position = legend_position,
axis.text = element_text(color = 'black', size = 12),
legend.text = element_text(color = 'black', size = 12),
axis.title = element_text(size = 12),
axis.text.x = element_text(angle = angle_x_text, vjust = 1, hjust = 1)) +
scale_fill_manual(values = fill.col)
# Set x and y axis limits and breaks if provided
if (!is.null(x_limits)) {
p <- p + scale_x_continuous(limits = x_limits, breaks = x_breaks)
} else if (!is.null(x_breaks)) {
p <- p + scale_x_continuous(limits = x_breaks)
}
if (!is.null(y_limits)) {
p <- p + scale_y_continuous(limits = y_limits, breaks = y_breaks)
} else if (!is.null(y_breaks)) {
p <- p + scale_y_continuous(limits = y_limits)
}
# Add significance layer if comparisons are provided
if (!is.null(comparisons)) {
p <- p + geom_signif(comparisons = comparisons,
map_signif_level = signif_map,
test = signif_test,
tip_length = signif_tip_length,
size = 0.8, color = "black")
}
return(p)
}
comparisons <- list(c("A_1", "A_2"), c("B_1", "B_2"), c("C_1", "C_2"))
# 使用函数
PlotViolin(df, x = "samples", y = "values",y_limits = c(1,20),y_breaks = 1,
comparisons = comparisons,signif_tip_length = 0.01)
# 使用函数
PlotViolin(df, x = "samples", y = "values",
comparisons = comparisons,signif_tip_length = 0.01)
# 使用函数
PlotViolin(df, x = "samples", y = "values",y_limits = 20,
comparisons = comparisons,signif_tip_length = 0.01)
# 使用函数
PlotViolin(df, x = "samples", y = "values",y_limits = c(1,20),
comparisons = comparisons,signif_tip_length = 0.01)
#' @export
#' @import ggplot2
#' @import ggpubr
#' @import ggsignif
#' @import tidyverse
#' @import ggprism
#' @import vioplot
#' @import RColorBrewer
#' @import grid
#' @import scales
PlotViolin <- function(df, x, y, comparisons = NULL,
fill.col = colorRampPalette(brewer.pal(9, "Set1"))(6),
color = colorRampPalette(brewer.pal(11, "BrBG"))(30),
title = NULL, xlab = NULL, ylab = NULL,
angle_x_text = 45, legend_position = "none",
signif_test = "t.test", signif_map = TRUE,
signif_tip_length = c(0.01),
x_limits = NULL, y_limits = NULL) {
# Create the plot
p <- ggplot(df, aes_string(x = x, y = y, fill = x)) +
geom_violin(trim = TRUE, position = position_dodge(width = 0.1), scale = 'width') +
geom_boxplot(alpha = 1, outlier.size = 0, size = 0.3, width = 0.2, fill = "white") +
stat_summary(fun = "mean", geom = "point", shape = 21, size = 2, fill = "blue") +
labs(x = xlab, y = ylab, title = title) +
theme_prism() +
theme(panel.grid = element_blank(),
axis.line = element_line(),
legend.position = legend_position,
axis.text = element_text(color = 'black', size = 12),
legend.text = element_text(color = 'black', size = 12),
axis.title = element_text(size = 12),
axis.text.x = element_text(angle = angle_x_text, vjust = 1, hjust = 1)) +
scale_fill_manual(values = fill.col)
# Set x and y axis limits if provided
if (!is.null(x_limits)) {
p <- p + scale_x_continuous(limits = x_limits, breaks = seq(x_limits[1],x_limits[2],x_breaks))
}
if (!is.null(y_limits)) {
p <- p + scale_y_continuous(limits = y_limits, breaks = seq(x_limits[1],y_limits[2],y_breaks) )
}
# Add significance layer if comparisons are provided
if (!is.null(comparisons)) {
p <- p + geom_signif(comparisons = comparisons,
map_signif_level = signif_map,
test = signif_test,
tip_length = signif_tip_length,
size = 0.8, color = "black")
}
return(p)
}
comparisons <- list(c("A_1", "A_2"), c("B_1", "B_2"), c("C_1", "C_2"))
# 使用函数
PlotViolin(df, x = "samples", y = "values",y_limits = seq(0,20),
comparisons = comparisons,signif_tip_length = 0.01)
# 使用函数
PlotViolin(df, x = "samples", y = "values",y_limits = c(0,20),
comparisons = comparisons,signif_tip_length = 0.01)
# 使用函数
PlotViolin(df, x = "samples", y = "values",y_limits = c(0,20),
comparisons = comparisons,signif_tip_length = 0.01)
#' @export
#' @import ggplot2
#' @import ggpubr
#' @import ggsignif
#' @import tidyverse
#' @import ggprism
#' @import vioplot
#' @import RColorBrewer
#' @import grid
#' @import scales
PlotViolin <- function(df, x, y, comparisons = NULL,
fill.col = colorRampPalette(brewer.pal(9, "Set1"))(6),
color = colorRampPalette(brewer.pal(11, "BrBG"))(30),
title = NULL, xlab = NULL, ylab = NULL,
angle_x_text = 45, legend_position = "none",
signif_test = "t.test", signif_map = TRUE,
signif_tip_length = c(0.01),
x_limits = NULL, y_limits = NULL,x_breaks = 1,y_breaks = 1) {
# Create the plot
p <- ggplot(df, aes_string(x = x, y = y, fill = x)) +
geom_violin(trim = TRUE, position = position_dodge(width = 0.1), scale = 'width') +
geom_boxplot(alpha = 1, outlier.size = 0, size = 0.3, width = 0.2, fill = "white") +
stat_summary(fun = "mean", geom = "point", shape = 21, size = 2, fill = "blue") +
labs(x = xlab, y = ylab, title = title) +
theme_prism() +
theme(panel.grid = element_blank(),
axis.line = element_line(),
legend.position = legend_position,
axis.text = element_text(color = 'black', size = 12),
legend.text = element_text(color = 'black', size = 12),
axis.title = element_text(size = 12),
axis.text.x = element_text(angle = angle_x_text, vjust = 1, hjust = 1)) +
scale_fill_manual(values = fill.col)
# Set x and y axis limits if provided
if (!is.null(x_limits)) {
p <- p + scale_x_continuous(limits = x_limits, breaks = seq(x_limits[1],x_limits[2],x_breaks))
}
if (!is.null(y_limits)) {
p <- p + scale_y_continuous(limits = y_limits, breaks = seq(x_limits[1],y_limits[2],y_breaks) )
}
# Add significance layer if comparisons are provided
if (!is.null(comparisons)) {
p <- p + geom_signif(comparisons = comparisons,
map_signif_level = signif_map,
test = signif_test,
tip_length = signif_tip_length,
size = 0.8, color = "black")
}
return(p)
}
comparisons <- list(c("A_1", "A_2"), c("B_1", "B_2"), c("C_1", "C_2"))
# 使用函数
PlotViolin(df, x = "samples", y = "values",y_limits = c(0,20),
comparisons = comparisons,signif_tip_length = 0.01)
#' @export
#' @import ggplot2
#' @import ggpubr
#' @import ggsignif
#' @import tidyverse
#' @import ggprism
#' @import vioplot
#' @import RColorBrewer
#' @import grid
#' @import scales
PlotViolin <- function(df, x, y, comparisons = NULL,
fill.col = colorRampPalette(brewer.pal(9, "Set1"))(6),
color = colorRampPalette(brewer.pal(11, "BrBG"))(30),
title = NULL, xlab = NULL, ylab = NULL,
angle_x_text = 45, legend_position = "none",
signif_test = "t.test", signif_map = TRUE,
signif_tip_length = c(0.01),
x_limits = NULL, y_limits = NULL,x_breaks = 1,y_breaks = 1) {
# Create the plot
p <- ggplot(df, aes_string(x = x, y = y, fill = x)) +
geom_violin(trim = TRUE, position = position_dodge(width = 0.1), scale = 'width') +
geom_boxplot(alpha = 1, outlier.size = 0, size = 0.3, width = 0.2, fill = "white") +
stat_summary(fun = "mean", geom = "point", shape = 21, size = 2, fill = "blue") +
labs(x = xlab, y = ylab, title = title) +
theme_prism() +
theme(panel.grid = element_blank(),
axis.line = element_line(),
legend.position = legend_position,
axis.text = element_text(color = 'black', size = 12),
legend.text = element_text(color = 'black', size = 12),
axis.title = element_text(size = 12),
axis.text.x = element_text(angle = angle_x_text, vjust = 1, hjust = 1)) +
scale_fill_manual(values = fill.col)
# Set x and y axis limits if provided
if (!is.null(x_limits)) {
p <- p + scale_x_continuous(limits = x_limits, breaks = seq(x_limits[1],x_limits[2],x_breaks))
}
if (!is.null(y_limits)) {
p <- p + scale_y_continuous(limits = y_limits, breaks = seq(y_limits[1],y_limits[2],y_breaks) )
}
# Add significance layer if comparisons are provided
if (!is.null(comparisons)) {
p <- p + geom_signif(comparisons = comparisons,
map_signif_level = signif_map,
test = signif_test,
tip_length = signif_tip_length,
size = 0.8, color = "black")
}
return(p)
}
comparisons <- list(c("A_1", "A_2"), c("B_1", "B_2"), c("C_1", "C_2"))
# 使用函数
PlotViolin(df, x = "samples", y = "values",y_limits = c(0,20),
comparisons = comparisons,signif_tip_length = 0.01)
# 使用函数
PlotViolin(df, x = "samples", y = "values",y_limits = c(0,20),y_breaks = 5,
comparisons = comparisons,signif_tip_length = 0.01)
# 使用函数
PlotViolin(df, x = "samples", y = "values",y_limits = c(0,23),y_breaks = 5,
comparisons = comparisons,signif_tip_length = 0.01)
# 使用函数
PlotViolin(df, x = "samples", y = "values",y_limits = c(0,25),y_breaks = 5,
comparisons = comparisons,signif_tip_length = 0.01)
# 使用函数
PlotViolin(df, x = "samples", y = "values",
comparisons = comparisons,signif_tip_length = 0.01)
# 使用函数
PlotViolin(df, x = "samples", y = "values",y_limits = c(0,30),y_breaks = 5,
comparisons = comparisons,signif_tip_length = 0.01)
#' @export
#' @import ggplot2
#' @import ggpubr
#' @import ggsignif
#' @import tidyverse
#' @import ggprism
#' @import vioplot
#' @import RColorBrewer
#' @import grid
#' @import scales
PlotViolin <- function(df, x, y, comparisons = NULL,
fill.col = colorRampPalette(brewer.pal(9, "Set1"))(6),
color = colorRampPalette(brewer.pal(11, "BrBG"))(30),
title = NULL, xlab = NULL, ylab = NULL,
angle_x_text = 45, legend_position = "none",
signif_test = "t.test", signif_map = TRUE,
signif_tip_length = c(0.01),
x_limits = NULL, y_limits = NULL,
x_breaks = 1, y_breaks = 1) {
# Create the plot
p <- ggplot(df, aes_string(x = x, y = y, fill = x)) +
geom_violin(trim = TRUE, position = position_dodge(width = 0.1), scale = 'width') +
geom_boxplot(alpha = 1, outlier.size = 0, size = 0.3, width = 0.2, fill = "white") +
stat_summary(fun = "mean", geom = "point", shape = 21, size = 2, fill = "blue") +
labs(x = xlab, y = ylab, title = title) +
theme_prism() +
theme(panel.grid = element_blank(),
axis.line = element_line(),
legend.position = legend_position,
axis.text = element_text(color = 'black', size = 12),
legend.text = element_text(color = 'black', size = 12),
axis.title = element_text(size = 12),
axis.text.x = element_text(angle = angle_x_text, vjust = 1, hjust = 1)) +
scale_fill_manual(values = fill.col)
# Set x and y axis limits if provided
if (!is.null(x_limits)) {
p <- p + scale_x_continuous(limits = x_limits, breaks = seq(x_limits[1], x_limits[2], x_breaks))
}
if (!is.null(y_limits)) {
p <- p + scale_y_continuous(limits = y_limits, breaks = seq(y_limits[1], y_limits[2], y_breaks))
}
# Add significance layer if comparisons are provided
if (!is.null(comparisons)) {
p <- p + geom_signif(comparisons = comparisons,
map_signif_level = signif_map,
test = signif_test,
tip_length = signif_tip_length,
size = 0.8, color = "black")
}
return(p)
}
comparisons <- list(c("A_1", "A_2"), c("B_1", "B_2"), c("C_1", "C_2"))
# 使用函数
PlotViolin(df, x = "samples", y = "values",y_limits = c(0,30),y_breaks = 5,
comparisons = comparisons,signif_tip_length = 0.01)
library(easySingleCell)
data("iris")
iris
View(iris)
detach("package:easySingleCell", unload = TRUE)
library(easySingleCell)
rm(PlotViolin())
rm(PlotViolin
rm(PlotViolin)
?PlotViolin()
PlotViolin(iris,x = 'Species','Sepal.Length')
PlotViolin(iris,x = 'Species','Sepal.Length',y_limits = c(0,10))
PlotViolin(iris,x = 'Species','Sepal.Length',y_limits = c(0,10),y_breaks = 2)
PlotViolin(iris,x = 'Species','Sepal.Length',y_limits = c(2,10),y_breaks = 2)
PlotViolin(iris,x = 'Species','Sepal.Length',y_limits = c(2,8),y_breaks = 2)
PlotViolin(iris,x = 'Species','Sepal.Length',y_limits = c(2,8),y_breaks = 2,comparisons = list(c('setosa','versicolor')))
PlotViolin(iris,x = 'Species','Sepal.Length',y_limits = c(2,12),y_breaks = 2,comparisons = list(c('setosa','versicolor')))
PlotViolin(iris,x = 'Species','Sepal.Length',y_limits = c(2,10),y_breaks = 2,comparisons = list(c('setosa','versicolor')))
PlotViolin(iris,x = 'Species','Sepal.Length',comparisons = list(c('setosa','versicolor')))
PlotViolin(iris,x = 'Species','Sepal.Length',y_limits = c(5,10),y_breaks = 2,comparisons = list(c('setosa','versicolor')))
PlotViolin(iris,x = 'Species','Sepal.Length',y_limits = c(5,8),y_breaks = 0.5,comparisons = list(c('setosa','versicolor')))
PlotViolin(iris,x = 'Species','Sepal.Length',y_limits = c(5,10),y_breaks = 0.5,comparisons = list(c('setosa','versicolor')))
PlotViolin(iris,x = 'Species','Sepal.Length',y_limits = c(5,9),y_breaks = 0.5,comparisons = list(c('setosa','versicolor')))
PlotViolin(iris,x = 'Species','Sepal.Length',y_limits = c(5,8.5),y_breaks = 0.5,comparisons = list(c('setosa','versicolor')))
PlotViolin(iris,x = 'Species','Sepal.Length',y_limits = c(5,8.5),y_breaks = 0.5,comparisons = list(c('setosa','versicolor','setosa','verginica')))
PlotViolin(iris,x = 'Species','Sepal.Length',y_limits = c(5,8.5),y_breaks = 0.5,comparisons = list(c('setosa','versicolor','setosa','virginica')))
PlotViolin(iris,x = 'Species','Sepal.Length',y_limits = c(5,10),y_breaks = 0.5,comparisons = list(c('setosa','versicolor','setosa','virginica')))
PlotViolin(iris,x = 'Species','Sepal.Length',y_limits = c(5,10),y_breaks = 0.5,comparisons = list(c('setosa','versicolor'),c('setosa','virginica')))
PlotViolin(iris,x = 'Species','Sepal.Length',y_limits = c(5,10),y_breaks = 0.5,comparisons = list(c('setosa','versicolor'),c('versicolor','virginica')))
PlotViolin(iris,x = 'Species','Sepal.Length',y_limits = c(5,10),y_breaks = 0.5,comparisons = list(c('setosa','versicolor'),c('versicolor','virginica')),signif_tip_length = 0.1)
PlotViolin(iris,x = 'Species','Sepal.Length',y_limits = c(5,10),y_breaks = 0.5,comparisons = list(c('setosa','versicolor'),c('versicolor','virginica')),signif_tip_length = 0.0)
?geom_signif
#' @export
#' @import ggplot2
#' @import ggpubr
#' @import ggsignif
#' @import tidyverse
#' @import ggprism
#' @import vioplot
#' @import RColorBrewer
#' @import grid
#' @import scales
PlotViolin <- function(df, x, y, comparisons = NULL,
fill.col = colorRampPalette(brewer.pal(9, "Set1"))(6),
color = colorRampPalette(brewer.pal(11, "BrBG"))(30),
title = NULL, xlab = NULL, ylab = NULL,
angle_x_text = 45, legend_position = "none",
signif_test = "t.test", signif_map = TRUE,
signif_tip_length = c(0.01),
x_limits = NULL, y_limits = NULL,
x_breaks = 1, y_breaks = 1) {
# Create the plot
p <- ggplot(df, aes_string(x = x, y = y, fill = x)) +
geom_violin(trim = TRUE, position = position_dodge(width = 0.1), scale = 'width') +
geom_boxplot(alpha = 1, outlier.size = 0, size = 0.3, width = 0.2, fill = "white") +
stat_summary(fun = "mean", geom = "point", shape = 21, size = 2, fill = "blue") +
labs(x = xlab, y = ylab, title = title) +
theme_prism() +
theme(panel.grid = element_blank(),
axis.line = element_line(),
legend.position = legend_position,
axis.text = element_text(color = 'black', size = 12),
legend.text = element_text(color = 'black', size = 12),
axis.title = element_text(size = 12),
axis.text.x = element_text(angle = angle_x_text, vjust = 1, hjust = 1)) +
scale_fill_manual(values = fill.col)
# Set x and y axis limits if provided
if (!is.null(x_limits)) {
p <- p + scale_x_continuous(limits = x_limits, breaks = seq(x_limits[1], x_limits[2], x_breaks))
}
if (!is.null(y_limits)) {
p <- p + scale_y_continuous(limits = y_limits, breaks = seq(y_limits[1], y_limits[2], y_breaks))
}
# Add significance layer if comparisons are provided
if (!is.null(comparisons)) {
p <- p + geom_signif(comparisons = comparisons,
map_signif_level = signif_map,
test = signif_test,
step_increase = 0.1,
tip_length = signif_tip_length,
size = 0.8, color = "black")
}
return(p)
}
detach("package:easySingleCell", unload = TRUE)
library(easySingleCell)
library(easySingleCell)
detach("package:easySingleCell", unload = TRUE)
rm(PlotViolin())
rm(PlotViolin
rm(PlotViolin)
library(easySingleCell)
PlotViolin(iris,x = 'Species','Sepal.Length',y_limits = c(5,10),y_breaks = 0.5,comparisons = list(c('setosa','versicolor'),c('versicolor','virginica')),signif_tip_length = 0.0)
system.file("data", "hg38_genecode_v27.txt", package = "easySingleCell")
library(easySingleCell)
system.file("extdata", "hg38_gencode_v27.txt", package = "easySingleCell")
library(easySingleCell)
?RunInferCNVPipeline()
paste0("c(", ref_group, "='#00A0877F',", obs_group, "='#E64B357F')")
length(cluster_colors)
cluster_colors =c("#E69F00","#56B4E9","#009E73","#F0E442","#0072B2","#843C39")
length(cluster_colors)
!k_clusters==length(cluster_colors
k_clusters = 6
k_clusters==length(cluster_colors)
library(easySingleCell)
library(easySingleCell)
dim(sce)
library(easySingleCell)
dir.create('vignettes')
library(easySingleCell)
